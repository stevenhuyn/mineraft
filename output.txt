Cargo.toml
```rust
[workspace]
resolver = "2"
members = ["mob", "spawner"]

[workspace.package]
version = "0.0.1"
authors = ["stevenhuyn"]


# [[bin]]
# name = "spawner"
# path = "spawner/src/main.rs"

# [dependencies]
# mineraft-core = { path = "./mineraft-core" }
```

mob\Cargo.toml
```rust
[package]
name = "mob"
version = "0.1.0"
edition = "2021"

[dependencies]
bincode = "1.3"
clap = { version = "4.5.7", features = ["derive"] }
serde = { version = "1.0", features = ["derive"] }
```

mob\src\core.rs
```rust
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Default)]
struct PersistentState {
  pub current_term: u64,
  pub voted_for: u64,
  pub log: Vec<Entry>,
}

impl PersistentState {
  pub fn new() -> Self {
    Self { current_term: 0, voted_for: 0, log: Vec::new() }
  }
}

#[derive(Debug, Clone, Default)]
struct VolatileState {
  pub commit_index: u64,
  pub last_applied: u64,
}

impl VolatileState {
  pub fn new() -> Self {
    Self { commit_index: 0, last_applied: 0 }
  }
}

#[derive(Debug, Clone, Default)]
pub struct LeaderVolatileState {
  pub next_index: Vec<u64>,
  pub match_index: Vec<u64>,
}

impl LeaderVolatileState {
  pub fn new() -> Self {
    Self { next_index: Vec::new(), match_index: Vec::new() }
  }
}

#[derive(Debug, Clone)]
pub enum Role {
  Follower,
  Candidate,
  Leader(LeaderVolatileState),
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum Call {
  RequestVote(RequestVote),
  AppendEntries(AppendEntries),
}

#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct RequestVote {
  pub term: u64,
  pub candidate_id: u64,
  pub last_log_index: u64,
  pub last_log_term: u64,
}

impl RequestVote {
  pub fn new() -> Self {
    Self { term: 0, candidate_id: 0, last_log_index: 0, last_log_term: 0 }
  }
}

#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct AppendEntries {
  pub term: u64,
  pub leader_id: u64,
  pub prev_log_index: u64,
  pub prev_log_term: u64,
  pub entries: Vec<Entry>,
  pub leader_commit: u64,
}

impl AppendEntries {
  pub fn new() -> Self {
    Self {
      term: 0,
      leader_id: 0,
      prev_log_index: 0,
      prev_log_term: 0,
      entries: Vec::new(),
      leader_commit: 0,
    }
  }
}

#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct Entry;

#[derive(Debug, Clone)]
pub struct Node {
  persistent_state: PersistentState,
  volatile_state: VolatileState,
  role: Role,
}

impl Default for Node {
  fn default() -> Self {
    Self::new()
  }
}

impl Node {
  pub fn new() -> Self {
    Self {
      persistent_state: PersistentState::new(),
      volatile_state: VolatileState::new(),
      role: Role::Follower,
    }
  }
}
```

mob\src\lib.rs
```rust
pub mod core;
pub mod mob;
```

mob\src\main.rs
```rust
// TODO: Delete?

use clap::Parser;
use mob::spawn_mob;

mod core;
mod mob;

/// Simple program to greet a person
#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
  /// Name of the person to greet
  #[arg(short, long)]
  address: String,

  /// Number of times to greet
  #[arg(short, long)]
  peers: Vec<String>,
}

fn main() {
  let args = Args::parse();
  spawn_mob(args.address, args.peers);
}
```

mob\src\mob.rs
```rust
use std::{
  net::{TcpListener, TcpStream},
  thread::{self, JoinHandle},
  time::Duration,
};

use crate::core::{Call, RequestVote};

pub fn spawn_mob(address: String, peers: Vec<String>) -> Vec<JoinHandle<()>> {
  let receiver = thread::spawn(move || {
    let listener = TcpListener::bind(address.clone()).unwrap();
    println!("Listening on port {}...", address.clone());

    for stream in listener.incoming() {
      match stream {
        Ok(stream) => {
          println!("New connection: {}", stream.peer_addr().unwrap());
          thread::spawn(move || loop {
            let message: Result<Call, _> = bincode::deserialize_from(&stream);
            match message {
              Ok(message) => {
                println!("Received message: {:?}", message);
              }
              Err(e) => {
                println!("Error deserializing message: {:?}", e);
                break;
              }
            }
          });
        }
        Err(e) => {
          println!("Receiver Error: {}", e);
        }
      }
    }
  });

  let sender = thread::spawn(move || {
    for peer in peers {
      let stream = match TcpStream::connect(peer) {
        Ok(stream) => stream,
        Err(e) => {
          println!("Sender Error: {}", e);
          continue;
        }
      };

      loop {
        // Sleep for 3 seconds
        thread::sleep(Duration::from_secs(3));

        let message = Call::RequestVote(RequestVote {
          term: 0,
          candidate_id: 0,
          last_log_index: 0,
          last_log_term: 0,
        });

        match bincode::serialize_into(&stream, &message) {
          Ok(_) => {
            println!("Sent message: {:?}", message);
          }
          Err(e) => {
            println!("Error serializing message: {:?}", e);
          }
        }
      }
    }
  });

  vec![receiver, sender]
}
```

README.md
```rust
# A [Raft](https://raft.github.io/) implementation, but Mine own

Doing it in 2 stages following Standford's Assigment

Attempting it [sans-io](https://sans-io.readthedocs.io/)

## [Part 1](https://web.stanford.edu/~ouster/cs190-winter24/proj_raft1/)

## [Part 2](https://web.stanford.edu/~ouster/cs190-winter24/proj_raft2/)
```

spawner\Cargo.toml
```rust
[package]
name = "spawner"
version = "0.1.0"
edition = "2021"

[dependencies]
mob = { path = "../mob" }
clap = { version = "4.5.7", features = ["derive"] }
```

spawner\src\main.rs
```rust
use mob::mob::spawn_mob;

fn main() {
  let addresses = ["127.0.0.1:8080", "127.0.0.1:8081", "127.0.0.1:8082"];
  let mut handles = vec![];
  for &address in addresses.iter() {
    let peers: Vec<String> =
      addresses.iter().filter(|&&p| p != address).map(|a| a.to_string()).collect();
    handles.extend(spawn_mob(address.to_string(), peers));
  }

  for handle in handles {
    handle.join().unwrap();
  }
}
```

